name: 'Terraform'

on:
  pull_request:
    branches: [ "infrastructure" ]  # Trigger on pull request to 'infrastructure' branch

permissions:
  contents: read  # Permissions to read repository contents

jobs:
  Plan:
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Set up AWS credentials from GitHub secrets
      - name: Set up AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      - name: tfsec action
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          # Optional arguments for tfsec (you can specify them based on your needs)
          working_directory: '.'   # Default is the current directory
          format: 'json'           # Output format (e.g., json, default)
          additional_args: '--exclude-severity high'  # Optional: Add extra args to tfsec
          soft_fail: false         # Set to true to allow the action to not break the build
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Optional: GitHub token for API requests

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize the Terraform working directory
      - name: Terraform Init
        run: terraform init

      # Check Terraform configuration files for canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generate an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

      # Run tfsec to scan Terraform code for security issues

